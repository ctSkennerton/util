typedef	char    v16qi   attribute__((vector_size__ (16))); 
typedef	double  m128d   attribute__((vector_size__ (16), may_alias__)); 
typedef	int     m64     attribute__((vector_size__ (8), may_alias__)); 

ADD     := add | sub
ARITH   := add | sub | mul | div
BOOL    := and | andnot | or | xor
COM     := eq | ge | gt | le | lt | neq
CMP     := {COM} | nge | nle | ord | unord
MIX     := max | min

===================================================================================
bmmintrin.h       SSE5                      
nmmintrin.h       SSE4.2                    
ammintrin.h       SSE4A                     
wmmintrin.h       AES                       
smmintrin.h       SSE4.1                    
mmintrin-common.h SSE5+SSE4.1
tmmintrin.h       SSSE3                     
pmmintrin.h       SSE3                      
emmintrin.h       SSE2                      
xmmintrin.h       SSE                       
mmintrin.h        MMX                       
===================================================================================
void	_mm_mfence	
void	_mm_lfence	
void	_mm_sfence	
void	_mm_mwait	(uns_t E, unsigned int H)   mwait (E, H)
void	_mm_monitor	(void const * P, uns_t E, unsigned int H)   monitor (P, E, H)

void	_m_empty	
void	_mm_empty	
void	_mm_stream_pd	(double *A, m128d B)movntpd (A, (v2df)B)
void	_mm_stream_ps	(float *P, m128 A)  movntps (P, (v4sf)A)
void	_mm_stream_si128(m128i *A, m128i B) movntdq ((v2di *)A, (v2di)B)

m128	_mm_{ARITH}_ss	(m128 A, m128 B)    return {ARITH}ss ((__v4sf)A, (__v4sf)B)
m128	_mm_{ARITH}_ps	(m128 A, m128 B)    return {ARITH}ps ((__v4sf)A, (__v4sf)B)
m128d	_mm_{ARITH}_pd	(m128d A, m128d B)  return {ARITH}pd ((__v2df)A, (__v2df)B)
m128d	_mm_{ARITH}_sd	(m128d A, m128d B)  return {ARITH}sd ((__v2df)A, (__v2df)B)

m128	_mm_rcp_ps	(m128 A)	    return rcpps ((v4sf)A)
m128	_mm_rcp_ss	(m128 A)	    return rcpss ((v4sf)A)
m128	_mm_rsqrt_ps	(m128 A)	    return rsqrtps ((v4sf)A)
m128	_mm_rsqrt_ss	(m128 A)	    return rsqrtss ((v4sf)A)
m128	_mm_sqrt_ps	(m128 A)	    return sqrtps ((v4sf)A)
m128	_mm_sqrt_ss	(m128 A)	    return sqrtss ((v4sf)A)

m128d	_mm_sqrt_pd	(m128d A)	    return sqrtpd ((v2df)A)
m128d	_mm_sqrt_sd	(m128d A, m128d B)  v2df tmp = movsd ((v2df)A, (v2df)B)

m128d	_mm_{BOOL}_pd	(m128d A, m128d B)  return {BOOL}pd ((v2df)A, (v2df)B)
m128	_mm_{BOOL}_ps	(m128 A, m128 B)    return {BOOL}ps (A, B)
m128i	_mm_{BOOL}_si128(m128i A, m128i B)  return p{BOOL}128 ((v2di)A, (v2di)B)

m128i	_mm_{MIX}_epi16	(m128i A, m128i B)  return p{MIX}sw128 ((v8hi)A, (v8hi)B)
m128i	_mm_{MIX}_epu8	(m128i A, m128i B)  return p{MIX}ub128 ((v16qi)A, (v16qi)B)
m128	_mm_{MIX}_ps	(m128 A, m128 B)    return {MIX}ps ((v4sf)A, (v4sf)B)
m128	_mm_{MIX}_ss	(m128 A, m128 B)    return {MIX}ss ((v4sf)A, (v4sf)B)
m128d	_mm_{MIX}_pd	(m128d A, m128d B)  return {MIX}pd ((v2df)A, (v2df)B)
m128d	_mm_{MIX}_sd	(m128d A, m128d B)  return {MIX}sd ((v2df)A, (v2df)B)

m128i	_mm_{ADD}_epi8	(m128i A, m128i B)  return p{ADD}b128 ((__v16qi)A, (__v16qi)B)
m128i	_mm_{ADD}_epi16	(m128i A, m128i B)  return p{ADD}w128 ((__v8hi)A, (__v8hi)B)
m128i	_mm_{ADD}_epi32	(m128i A, m128i B)  return p{ADD}d128 ((__v4si)A, (__v4si)B)
m128i	_mm_{ADD}_epi64	(m128i A, m128i B)  return p{ADD}q128 ((__v2di)A, (__v2di)B)

m128i	_mm_{ADD}s_epi8	(m128i A, m128i B)  return p{ADD}sb128 ((__v16qi)A, (__v16qi)B)
m128i	_mm_{ADD}s_epi16(m128i A, m128i B)  return p{ADD}sw128 ((__v8hi)A, (__v8hi)B)
m128i	_mm_{ADD}s_epu8	(m128i A, m128i B)  return p{ADD}usb128 ((__v16qi)A, (__v16qi)B)
m128i	_mm_{ADD}s_epu16(m128i A, m128i B)  return p{ADD}usw128 ((__v8hi)A, (__v8hi)B)

m128i	_mm_mul_epu32	(m128i A, m128i B)  return pmuludq128 ((__v4si)A, (__v4si)B)
m128i	_mm_mulhi_epi16	(m128i A, m128i B)  return pmulhw128 ((__v8hi)A, (__v8hi)B)
m128i	_mm_mulhi_epu16	(m128i A, m128i B)  return pmulhuw128 ((__v8hi)A, (__v8hi)B)
m128i	_mm_mullo_epi16	(m128i A, m128i B)  return pmullw128 ((__v8hi)A, (__v8hi)B)

m128i	_mm_avg_epu8	(m128i A, m128i B)  return pavgb128 ((v16qi)A, (v16qi)B)
m128i	_mm_sad_epu8	(m128i A, m128i B)  return psadbw128 ((v16qi)A, (v16qi)B)
m128i	_mm_avg_epu16	(m128i A, m128i B)  return pavgw128 ((v8hi)A, (v8hi)B)
m128i	_mm_madd_epi16	(m128i A, m128i B)  return pmaddwd128 ((__v8hi)A, (__v8hi)B)
m128	_mm_addsub_ps	(m128 X, m128 Y)    return addsubps ((__v4sf)X, (__v4sf)Y)
m128d	_mm_addsub_pd	(m128d X, m128d Y)  return addsubpd ((__v2df)X, (__v2df)Y)

m128	_mm_hadd_ps	(m128 X, m128 Y)    return haddps ((__v4sf)X, (__v4sf)Y)
m128	_mm_hsub_ps	(m128 X, m128 Y)    return hsubps ((__v4sf)X, (__v4sf)Y)
m128d	_mm_hadd_pd	(m128d X, m128d Y)  return haddpd ((__v2df)X, (__v2df)Y)
m128d	_mm_hsub_pd	(m128d X, m128d Y)  return hsubpd ((__v2df)X, (__v2df)Y)

XXX something is wrong here; _mm_cmpord_epi* makes no sense
m128i	_mm_cmp{CMP}_epi8	(m128i A, m128i B)	return pcmp{CMP}b128 ((v16qi)A, (v16qi)B)
m128i	_mm_cmp{CMP}_epi16	(m128i A, m128i B)	return pcmp{CMP}w128 ((v8hi)A, (v8hi)B)
m128i	_mm_cmp{CMP}_epi32	(m128i A, m128i B)	return pcmp{CMP}d128 ((v4si)A, (v4si)B)
m128	_mm_cmp{CMP}_ps	        (m128 A, m128 B)	return cmp{CMP}ps ((v4sf)A, (v4sf)B)
m128d	_mm_cmp{CMP}_pd	        (m128d A, m128d B)	return cmp{CMP}pd ((v2df)A, (v2df)B)
m128	_mm_cmp{CMP}_ss	        (m128 A, m128 B)	return movss ((v4sf) A, (v4sf) cmp{CMP}ss ((v4sf) B, (v4sf) A))
m128d	_mm_cmp{CMP}_sd	        (m128d A, m128d B)	return movsd ((v2df) A, (v2df) cmp{CMP}sd ((v2df) B, (v2df) A))
m128i	_mm_cmp{CMP}_epi8	(m128i A, m128i B)	return pcmp{CMP}b128 ((v16qi)A, (v16qi)B)
m128i	_mm_cmp{CMP}_epi16	(m128i A, m128i B)	return pcmp{CMP}w128 ((v8hi)A, (v8hi)B)
m128i	_mm_cmp{CMP}_epi32	(m128i A, m128i B)	return pcmp{CMP}d128 ((v4si)A, (v4si)B)
m128d	_mm_cmp{CMP}_pd	        (m128d A, m128d B)	return cmp{CMP}pd ((v2df)A, (v2df)B)
m128	_mm_cmp{CMP}_ps	        (m128 A, m128 B)	return cmp{CMP}ps ((v4sf)A, (v4sf)B)
m128d	_mm_cmp{CMP}_sd	        (m128d A, m128d B)	return cmp{CMP}sd ((v2df)A, (v2df)B)
m128	_mm_cmp{CMP}_ss	        (m128 A, m128 B)	return cmp{CMP}ss ((v4sf)A, (v4sf)B)

int	_mm_(u)?comi{COM}_ss	(m128 A, m128 B)	return (u)?comi{COM} ((v4sf)A, (v4sf)B)
int	_mm_(u)?comi{COM}_sd	(m128d A, m128d B)	return (u)?comisd{COM} ((v2df)A, (v2df)B)

float	_mm_cvtss_f32	(m128 A)	        return vec_ext_v4sf ((v4sf)A, 0)
int	_mm_cvtsd_si32	(m128d A)	        return cvtsd2si ((v2df) A)
int	_mm_cvtsi128_si32(m128i A)	        return vec_ext_v4si ((v4si)A, 0)
int	_mm_cvt_ss2si	(m128 A)	        return _mm_cvtss_si32 (A)
int	_mm_cvtss_si32	(m128 A)	        return cvtss2si ((v4sf) A)
int	_mm_cvttsd_si32	(m128d A)	        return cvttsd2si ((v2df) A)
int	_mm_cvtt_ss2si	(m128 A)	        return _mm_cvttss_si32 (A)
int	_mm_cvttss_si32	(m128 A)	        return cvttss2si ((v4sf) A)
m128d	_mm_cvtepi32_pd	(m128i A)	        return cvtdq2pd ((v4si) A)
m128d	_mm_cvtps_pd	(m128 A)	        return cvtps2pd ((v4sf) A)
m128d	_mm_cvtsi32_sd	(m128d A, int B)	return cvtsi2sd ((v2df) A, B)
m128d	_mm_cvtss_sd	(m128d A, m128 B)	return cvtss2sd ((v2df) A, (v4sf)B)
m128i	_mm_cvtpd_epi32	(m128d A)	        return cvtpd2dq ((v2df) A)
m128i	_mm_cvtps_epi32	(m128 A)	        return cvtps2dq ((v4sf) A)
m128i	_mm_cvtsi32_si128(int A)	        return _mm_set_epi32 (0, 0, 0, A)
m128i	_mm_cvttpd_epi32(m128d A)	        return cvttpd2dq ((v2df) A)
m128i	_mm_cvttps_epi32(m128 A)	        return cvttps2dq ((v4sf) A)
m128	_mm_cvtepi32_ps	(m128i A)	        return cvtdq2ps ((v4si) A)
m128	_mm_cvtpd_ps	(m128d A)	        return cvtpd2ps ((v2df) A)
m128	_mm_cvt_pi2ps	(m128 A, m64 B)	        return _mm_cvtpi32_ps (A, B)
m128	_mm_cvtpi32_ps	(m128 A, m64 B)	        return cvtpi2ps ((v4sf) A, (v2si)B)
m128	_mm_cvtsd_ss	(m128 A, m128d B)	return cvtsd2ss ((v4sf) A, (v2df) B)
m128	_mm_cvt_si2ss	(m128 A, int B)	        return _mm_cvtsi32_ss (A, B)
m128	_mm_cvtsi32_ss	(m128 A, int B)	        return cvtsi2ss ((v4sf) A, B)
m64	_mm_cvtpd_pi32	(m128d A)	        return cvtpd2pi ((v2df) A)
m64	_mm_cvt_ps2pi	(m128 A)	        return _mm_cvtps_pi32 (A)
m64	_mm_cvtps_pi16  (m128 A)                v4sf hisf = (v4sf)A; v4sf losf = movhlps (hisf, hisf); v2si hisi = cvtps2pi (hisf); v2si losi = cvtps2pi (losf);	return packssdw (hisi, losi)
m64	_mm_cvtps_pi32	(m128 A)	        return cvtps2pi ((v4sf) A)
m64	_mm_cvtps_pi8   (m128 A)                v4hi tmp = (v4hi) _mm_cvtps_pi16 (A);	return packsswb (tmp, (v4hi)0LL)
m64	_mm_cvttpd_pi32	(m128d A)	        return cvttpd2pi ((v2df) A)
m64	_mm_cvtt_ps2pi	(m128 A)	        return _mm_cvttps_pi32 (A)
m64	_mm_cvttps_pi32	(m128 A)	        return cvttps2pi ((v4sf) A)

m128d	_mm_load1_pd	(double const *P)	return _mm_set1_pd (*P)
m128d	_mm_loaddup_pd	(double const *P)       return _mm_load1_pd (P)
m128d	_mm_loadh_pd	(m128d A, double const *B)	return loadhpd ((v2df)A, B)
m128d	_mm_loadl_pd	(m128d A, double const *B)	return loadlpd ((v2df)A, B)
m128d	_mm_load_pd1	(double const *P)	return _mm_load1_pd (P)
m128d	_mm_load_pd	(double const *P)	return *(m128d *)P
m128d	_mm_loadr_pd	(double const *P)       m128d tmp = _mm_load_pd (P)
m128d	_mm_load_sd	(double const *P)	return _mm_set_sd (*P)
m128d	_mm_loadu_pd	(double const *P)	return loadupd (P)
m128i	_mm_lddqu_si128	(m128i const *P)	return lddqu ((char const *)P)
m128i	_mm_loadl_epi64	(m128i const *P)	return _mm_set_epi64 ((m64)0LL, *(m64 *)P)
m128i	_mm_load_si128	(m128i const *P)	return *P
m128i	_mm_loadu_si128	(m128i const *P)        return loaddqu ((char const *)P)
m128	_mm_load1_ps	(float const *P)	return _mm_set1_ps (*P)
m128	_mm_loadh_pi	(m128 A, m64 const *P)	return loadhps ((v4sf)A, (v2si *)P)
m128	_mm_loadl_pi	(m128 A, m64 const *P)	return loadlps ((v4sf)A, (v2si *)P)
m128	_mm_load_ps1	(float const *P)	return _mm_load1_ps (P)
m128	_mm_load_ps	(float const *P)	return *(v4sf *)P
m128	_mm_loadr_ps	(float const *P)        v4sf tmp = *(v4sf *)P
m128	_mm_load_ss	(float const *P)	return _mm_set_ss (*P)
m128	_mm_loadu_ps	(float const *P)	return loadups (P)

void	_mm_maskmoveu_si128	(m128i A, m128i B, char *C)   maskmovdqu ((v16qi)A, (v16qi)B, C)
m128d	_mm_move_sd	(m128d A, m128d B)	return movsd ((v2df)A, (v2df)B)
m128	_mm_move_ss	(m128 A, m128 B)	return movss ((v4sf)A, (v4sf)B)
m128d	_mm_movedup_pd	(m128d X)	        return ((m128d)shufpd ((v2df)X, (v2df)X, ((((0) << 1) | (0)))))
m128	_mm_movehdup_ps	(m128 X)	        return movshdup ((v4sf)X)
m128	_mm_movehl_ps	(m128 A, m128 B)	return movhlps ((v4sf)A, (v4sf)B)
m128	_mm_moveldup_ps	(m128 X)	        return movsldup ((v4sf)X)
m128	_mm_movelh_ps	(m128 A, m128 B)	return movlhps ((v4sf)A, (v4sf)B)
int	_mm_movemask_epi8(m128i A)	        return pmovmskb128 ((v16qi)A)   high bit of each m128 byte sets low 16 bits of eax
int	_mm_movemask_pd	(m128d A)	        return movmskpd ((v2df)A)
int	_mm_movemask_ps	(m128 A)	        return movmskps ((v4sf)A)
m64	_mm_movepi64_pi64(m128i B)	        return vec_ext_v2di ((v2di)B, 0)
m128i	_mm_movpi64_epi64(m64 A)	        return _mm_set_epi64 ((m64)0LL, A)
m128i	_mm_move_epi64	(m128i A)	        return _mm_set_epi64 ((m64)0LL, _mm_movepi64_pi64 (A))

m128i	_mm_set1_epi16	(short A)	        return _mm_set_epi16 (A,A,A,A,A,A,A,A)
m128i	_mm_set1_epi32	(int A)	                return _mm_set_epi32 (A,A,A,A)
m128i	_mm_set1_epi64	(m64 A)	                return _mm_set_epi64 (A,A)
m128i	_mm_set1_epi64x	(long long A)	        return _mm_set_epi64x(A,A)
m128i	_mm_set1_epi8	(char A)	        return _mm_set_epi8  (A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)
m128d	_mm_set1_pd	(double F)	        return (m128d){ F, F }
m128	_mm_set1_ps	(float F)	        return (m128)(v4sf){ F, F, F, F }
m128i	_mm_set_epi16	(short q7..0)	        return (m128i)(v8hi){ q0..7 }
m128i	_mm_set_epi32	(int q3..0)	        return (m128i)(v4si){ q0, q1, q2, q3 }
m128i	_mm_set_epi64	(m64 q1, m64 q0)	return _mm_set_epi64x ((long long)q1, (long long)q0)
m128i	_mm_set_epi64x	(long long q1..0)	return (m128i)(v2di){ q0, q1 }
m128i	_mm_set_epi8	(char q15..00)	        return (m128i)(v16qi){ q00, .. q15 }
m128d	_mm_set_pd	(double W, double X)	return (m128d){ X, W }
m128d	_mm_set_pd1	(double F)	        return _mm_set1_pd (F)
m128	_mm_set_ps	(float F0..3)       	return (m128)(v4sf){ F3..0Z }
m128	_mm_set_ps1	(float F)	        return _mm_set1_ps (F)
m128d	_mm_set_sd	(double F)	        return (m128d){ F, 0 }
m128	_mm_set_ss	(float F)	        return (m128)(v4sf){ F, 0, 0, 0 }
m128i	_mm_setr_epi16	(short q0..7)	        return _mm_set_epi16 (q7..0)
m128i	_mm_setr_epi32	(int q0, int q1, int q2, int q3)	return _mm_set_epi32 (q3, q2, q1, q0)
m128i	_mm_setr_epi64	(m64 q0, m64 q1)	return _mm_set_epi64 (q1, q0)
m128i	_mm_setr_epi8	(char q00..15)	        return _mm_set_epi8 (q15..00)
m128d	_mm_setr_pd	(double W, double X)	return (m128d){ W, X }
m128	_mm_setr_ps	(float Z, float Y, float X, float W)	return (m128)(v4sf){ Z, Y, X, W }
m128d	_mm_setzero_pd	
m128	_mm_setzero_ps	
m128i	_mm_setzero_si128	

m128i	_mm_slli_epi16	(m128i A, int B)	return psllw128((v8hi)A, (v8hi)B)
m128i	_mm_slli_epi32	(m128i A, int B)	return pslld128((v4si)A, (v4si)B)
m128i	_mm_slli_epi64	(m128i A, int B)	return psllq128((v2di)A, (v2di)B)
m128i	_mm_slli_si128	(m128i A, int B)	return pslldqi128((v2di)A, B*8)

m128i	_mm_srai_epi16	(m128i A, int B)	return psrawi128 ((v8hi)A, (v8hi)B)
m128i	_mm_srai_epi32	(m128i A, int B)	return psradi128 ((v4si)A, (v4si)B)

m128i	_mm_srli_epi16	(m128i A, int B)	return psrlwi128 ((v8hi)A, (v8hi)B)
m128i	_mm_srli_epi32	(m128i A, int B)	return psrldi128 ((v4si)A, (v4si)B)
m128i	_mm_srli_epi64	(m128i A, int B)	return psrlqi128 ((v2di)A, (v2di)B)
m128i	_mm_srli_si128	(m128i A, int B)	return psrldqi128((v2di)A, (v2di)B)

void	_mm_store1_pd	(double *P, m128d A)    _mm_store_pd (P, shufpd (A,A, (((0) << 1) | (0))))
void	_mm_store1_ps	(float *P, m128 A)      v4sf va = (v4sf)A; v4sf tmp = shufps (va, va, (((0) << 6) | ((0) << 4) | ((0) << 2) | (0))); _mm_storeu_ps (P, tmp)
void	_mm_store_pd	(double *P, m128d A)    *(m128d *)P = A
void	_mm_store_pd1	(double *P, m128d A)    _mm_store1_pd (P, A)
void	_mm_store_ps	(float *P, m128 A)      *(v4sf *)P = (v4sf)A
void	_mm_store_ps1	(float *P, m128 A)      _mm_store1_ps (P, A)
void	_mm_store_sd	(double *P, m128d A)    *P = vec_ext_v2df (A, 0)
void	_mm_store_si128	(m128i *P, m128i B)     *P = B
void	_mm_store_ss	(float *P, m128 A)      *P = vec_ext_v4sf ((v4sf)A, 0)
void	_mm_storeh_pd	(double *P, m128d A)    *P = vec_ext_v2df (A, 1)
void	_mm_storeh_pi	(m64 *P, m128 A)        storehps ((v2si *)P, (v4sf)A)
void	_mm_storel_epi64(m128i *P, m128i B)     *(long long *)P = vec_ext_v2di ((v2di)B, 0)
void	_mm_storel_pd	(double *P, m128d A)    _mm_store_sd (P, A)
void	_mm_storel_pi	(m64 *P, m128 A)        storelps ((v2si *)P, (v4sf)A)
void	_mm_storer_pd	(double *P, m128d A)    _mm_store_pd (P, shufpd (A,A, (((0) << 1) | (1))))
void	_mm_storer_ps	(float *P, m128 A)      v4sf va = (v4sf)A; v4sf tmp = shufps (va, va, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3))); _mm_store_ps (P, tmp)
void	_mm_storeu_pd	(double *P, m128d A)    storeupd (P, A)
void	_mm_storeu_ps	(float *P, m128 A)      storeups (P, (v4sf)A)
void	_mm_storeu_si128(m128i *P, m128i B)     storedqu ((char *)P, (v16qi)B)

m128i	_mm_packs_epi16	(m128i A, m128i B)	return packsswb128 ((v8hi)A, (v8hi)B)
m128i	_mm_packs_epi32	(m128i A, m128i B)	return packssdw128 ((v4si)A, (v4si)B)
m128i	_mm_packus_epi16(m128i A, m128i B)	return packuswb128 ((v8hi)A, (v8hi)B)

m128d	_mm_unpackhi_pd	        (m128d A, m128d B)	return unpckhpd ((v2df)A, (v2df)B)
m128d	_mm_unpacklo_pd	        (m128d A, m128d B)	return unpcklpd ((v2df)A, (v2df)B)
m128i	_mm_unpackhi_epi16	(m128i A, m128i B)	return punpckhwd128 ((v8hi)A, (v8hi)B)
m128i	_mm_unpackhi_epi32	(m128i A, m128i B)	return punpckhdq128 ((v4si)A, (v4si)B)
m128i	_mm_unpackhi_epi64	(m128i A, m128i B)	return punpckhqdq128 ((v2di)A, (v2di)B)
m128i	_mm_unpackhi_epi8	(m128i A, m128i B)	return punpckhbw128 ((v16qi)A, (v16qi)B)
m128i	_mm_unpacklo_epi16	(m128i A, m128i B)	return punpcklwd128 ((v8hi)A, (v8hi)B)
m128i	_mm_unpacklo_epi32	(m128i A, m128i B)	return punpckldq128 ((v4si)A, (v4si)B)
m128i	_mm_unpacklo_epi64	(m128i A, m128i B)	return punpcklqdq128 ((v2di)A, (v2di)B)
m128i	_mm_unpacklo_epi8	(m128i A, m128i B)	return punpcklbw128 ((v16qi)A, (v16qi)B)
m128	_mm_unpackhi_ps	        (m128 A, m128 B)	return unpckhps ((v4sf)A, (v4sf)B)
m128	_mm_unpacklo_ps	        (m128 A, m128 B)	return unpcklps ((v4sf)A, (v4sf)B)
==============================================================================
SSSE3 builtins (tmmintrin.h?) Not avail on pentium4 or athlon/opteron.
    v16qi __builtin_ia32_pabsb128     (v16qi)        
    v4si  __builtin_ia32_pabsd128     (v4si)         
    v8hi  __builtin_ia32_pabsw128     (v8hi)         
    v2di  __builtin_ia32_palignr128   (v2di,  v2di,  int)
    v4si  __builtin_ia32_phaddd128    (v4si,  v4si)  
    v8hi  __builtin_ia32_phaddsw128   (v8hi,  v8hi)  
    v8hi  __builtin_ia32_phaddw128    (v8hi,  v8hi)  
    v4si  __builtin_ia32_phsubd128    (v4si,  v4si)  
    v8hi  __builtin_ia32_phsubsw128   (v8hi,  v8hi)  
    v8hi  __builtin_ia32_phsubw128    (v8hi,  v8hi)  
    v8hi  __builtin_ia32_pmaddubsw128 (v16qi, v16qi) 
    v8hi  __builtin_ia32_pmulhrsw128  (v8hi,  v8hi)  
    v16qi __builtin_ia32_pshufb128    (v16qi, v16qi) 
    v16qi __builtin_ia32_psignb128    (v16qi, v16qi) 
    v4si  __builtin_ia32_psignd128    (v4si,  v4si)  
    v8hi  __builtin_ia32_psignw128    (v8hi,  v8hi)  
