#!/bin/sh
# statps: analyze pspace (ps.log.*) from pmx stats
#   Lists: elapsed-secs, cpu-secs, %cpu, state=%..., command
#-------------------------------------------------------------

awk '
# secs(hms): compute seconds from [hh:]mm:ss[.xxx]
function secs(hms, n,v,i,s) {
    n = split(hms, v, ":")
    for (i = 1; i <=n; ++i) s = s*60 + v[i]
    return  s
}

# Aggregate stats (cmd; start/end time; hits and hits per state) per process
{   
    TS=$1; PID=$3; CPU=$4; MEM=$5; VSZ=$6; RSS=$7; TTY=$8; STAT=substr($9,1,1); START=$10; TIME=$11

    # Wipe out any pointless differences btw command invocations.
    cmd=""; for (i=12; i<=NF; ++i) cmd=cmd" "$i; cmd=substr(cmd,2)
    gsub(/127.0.0.1/, "localhost", cmd)
    gsub(/[0-9][0-9][0-9]*/, "", cmd)   
    Rss[cmd] += RSS; Hits[cmd]++

    id = PID" "START
    if (!(id in alpha)) { alpha[id] = TS";"TIME";"cmd; ++Inst[cmd] }
    omega[id] = TS";"TIME
    states[STAT]=1; state[cmd" "STAT]++
}

END {
    # Aggregate process stats per cmd.
    for (id in alpha) {
        split(alpha[id], a, ";"); split(omega[id], z, ";")
        wtime = secs(z[1]) - secs(a[1])
        ctime = secs(z[2]) - secs(a[2])
        if (wtime >= 0 && ctime >= 0) {
            cmd = a[3]
            Wtime[cmd] += wtime
            Ctime[cmd] += ctime
        }
    }
    fmt = "%8s %4s %8s %4s %6s %-20s	| %s\n"
    printf "1 "fmt, "TIME", "INST", "CPU", "%CPU", "RSS", "STATES", "COMMAND"
    for (cmd in Wtime) {
        if (Ctime[cmd] > 0) {
            s = ""
            for (stat in states) if (h=int(100*state[cmd" "stat]/Hits[cmd])) s=s","stat"="h
            s = s ? substr(s,2) : "-"
            printf "2 "fmt, Wtime[cmd], Inst[cmd], int(Ctime[cmd]), int(100*Ctime[cmd]/Wtime[cmd]), 
				int(Rss[cmd]/Hits[cmd]), s, cmd
        }
    }
}
' $* \
| tee frog \
| sort +0 -1 +3 -4nr +2 -3nr | cut -c3-
